(()=>{var e={23:e=>{"use strict";e.exports=require("util")},37:e=>{"use strict";e.exports=require("mongoose")},129:e=>{"use strict";e.exports=require("mongoose-type-email")},164:(e,t,s)=>{const a=s(252),n=s(896),r=s(928),o=a.Router();o.get("/resume/:file",((e,t)=>{const s=r.join(__dirname,`../public/resume/${e.params.file}`);n.access(s,n.F_OK,(e=>{e?t.status(404).json({message:"File not found"}):t.sendFile(s)}))})),o.get("/profile/:file",((e,t)=>{const s=r.join(__dirname,`../public/profile/${e.params.file}`);n.access(s,n.F_OK,(e=>{e?t.status(404).json({message:"File not found"}):t.sendFile(s)}))})),e.exports=o},169:(e,t,s)=>{const a=s(37);let n=new a.Schema({userId:{type:a.Schema.Types.ObjectId,required:!0},name:{type:String,required:!0},education:[{institutionName:{type:String,required:!0},startYear:{type:Number,min:1930,max:(new Date).getFullYear(),required:!0,validate:Number.isInteger},endYear:{type:Number,max:(new Date).getFullYear(),validate:[{validator:Number.isInteger,msg:"Year should be an integer"},{validator:function(e){return this.startYear<=e},msg:"End year should be greater than or equal to Start year"}]}}],skills:[String],rating:{type:Number,max:5,default:-1,validate:{validator:function(e){return e>=-1&&e<=5},msg:"Invalid rating"}},resume:{type:String},profile:{type:String}},{collation:{locale:"en"}});e.exports=a.model("JobApplicantInfo",n)},177:(e,t,s)=>{const a=s(37);let n=new a.Schema({userId:{type:a.Schema.Types.ObjectId,required:!0},name:{type:String,required:!0},contactNumber:{type:String,validate:{validator:function(e){return""===e||/\+\d{1,3}\d{10}/.test(e)},msg:"Phone number is invalid!"}},bio:{type:String}},{collation:{locale:"en"}});e.exports=a.model("RecruiterInfo",n)},203:e=>{"use strict";e.exports=require("stream")},207:(e,t,s)=>{const a=s(37);let n=new a.Schema({userId:{type:a.Schema.Types.ObjectId,required:!0},title:{type:String,required:!0},maxApplicants:{type:Number,validate:[{validator:Number.isInteger,msg:"maxApplicants should be an integer"},{validator:function(e){return e>0},msg:"maxApplicants should greater than 0"}]},maxPositions:{type:Number,validate:[{validator:Number.isInteger,msg:"maxPostions should be an integer"},{validator:function(e){return e>0},msg:"maxPositions should greater than 0"}]},activeApplications:{type:Number,default:0,validate:[{validator:Number.isInteger,msg:"activeApplications should be an integer"},{validator:function(e){return e>=0},msg:"activeApplications should greater than equal to 0"}]},acceptedCandidates:{type:Number,default:0,validate:[{validator:Number.isInteger,msg:"acceptedCandidates should be an integer"},{validator:function(e){return e>=0},msg:"acceptedCandidates should greater than equal to 0"}]},dateOfPosting:{type:Date,default:Date.now},deadline:{type:Date,validate:[{validator:function(e){return this.dateOfPosting<e},msg:"deadline should be greater than dateOfPosting"}]},skillsets:[String],jobType:{type:String,required:!0},duration:{type:Number,min:0,validate:[{validator:Number.isInteger,msg:"Duration should be an integer"}]},salary:{type:Number,validate:[{validator:Number.isInteger,msg:"Salary should be an integer"},{validator:function(e){return e>=0},msg:"Salary should be positive"}]},rating:{type:Number,max:5,default:-1,validate:{validator:function(e){return e>=-1&&e<=5},msg:"Invalid rating"}}},{collation:{locale:"en"}});e.exports=a.model("jobs",n)},252:e=>{"use strict";e.exports=require("express")},258:(e,t,s)=>{const a=s(252),n=s(278),r=s(829),o=s(359),i=s(793),u=s(169),d=s(177),c=a.Router();c.post("/signup",((e,t)=>{const s=e.body;let a=new i({email:s.email,password:s.password,type:s.type});a.save().then((()=>{("recruiter"==a.type?new d({userId:a._id,name:s.name,contactNumber:s.contactNumber,bio:s.bio}):new u({userId:a._id,name:s.name,education:s.education,skills:s.skills,rating:s.rating,resume:s.resume,profile:s.profile})).save().then((()=>{const e=r.sign({_id:a._id},o.jwtSecretKey);t.json({token:e,type:a.type})})).catch((e=>{a.delete().then((()=>{t.status(400).json(e)})).catch((e=>{t.json({error:e})}))}))})).catch((e=>{t.status(400).json(e)}))})),c.post("/login",((e,t,s)=>{n.authenticate("local",{session:!1},(function(e,a,n){if(e)return s(e);if(!a)return void t.status(401).json(n);const i=r.sign({_id:a._id},o.jwtSecretKey);t.json({token:i,type:a.type})}))(e,t,s)})),e.exports=c},268:e=>{"use strict";e.exports=require("body-parser")},274:(e,t,s)=>{const a=s(278);e.exports=(e,t,s)=>{a.authenticate("jwt",{session:!1},(function(a,n,r){if(a)return s(a);n?(e.user=n,s()):t.status(401).json(r)}))(e,t,s)}},278:e=>{"use strict";e.exports=require("passport")},359:e=>{e.exports={jwtSecretKey:"jwt_secret"}},461:e=>{"use strict";e.exports=require("multer")},485:(e,t,s)=>{const a=s(252),n=s(461),r=s(896),{v4:o}=s(903),{promisify:i}=s(23),u=i(s(203).pipeline),d=a.Router(),c=n();d.post("/resume",c.single("file"),((e,t)=>{const{file:s}=e;if(".pdf"!=s.detectedFileExtension)t.status(400).json({message:"Invalid format"});else{const e=`${o()}${s.detectedFileExtension}`;u(s.stream,r.createWriteStream(`${__dirname}/../public/resume/${e}`)).then((()=>{t.send({message:"File uploaded successfully",url:`/host/resume/${e}`})})).catch((e=>{t.status(400).json({message:"Error while uploading"})}))}})),d.post("/profile",c.single("file"),((e,t)=>{const{file:s}=e;if(".jpg"!=s.detectedFileExtension&&".png"!=s.detectedFileExtension)t.status(400).json({message:"Invalid format"});else{const e=`${o()}${s.detectedFileExtension}`;u(s.stream,r.createWriteStream(`${__dirname}/../public/profile/${e}`)).then((()=>{t.send({message:"Profile image uploaded successfully",url:`/host/profile/${e}`})})).catch((e=>{t.status(400).json({message:"Error while uploading"})}))}})),e.exports=d},486:e=>{"use strict";e.exports=require("bcrypt")},577:e=>{"use strict";e.exports=require("cors")},610:(e,t,s)=>{const a=s(37);let n=new a.Schema({userId:{type:a.Schema.Types.ObjectId,required:!0},recruiterId:{type:a.Schema.Types.ObjectId,required:!0},jobId:{type:a.Schema.Types.ObjectId,required:!0},status:{type:String,enum:["applied","shortlisted","accepted","rejected","deleted","cancelled","finished"],default:"applied",required:!0},dateOfApplication:{type:Date,default:Date.now},dateOfJoining:{type:Date,validate:[{validator:function(e){return this.dateOfApplication<=e},msg:"dateOfJoining should be greater than dateOfApplication"}]},sop:{type:String,validate:{validator:function(e){return e.split(" ").filter((e=>""!=e)).length<=250},msg:"Statement of purpose should not be greater than 250 words"}}},{collation:{locale:"en"}});e.exports=a.model("applications",n)},650:(e,t,s)=>{const a=s(252),n=s(37),r=s(274),o=s(793),i=s(169),u=s(177),d=s(207),c=s(610),l=s(995),p=a.Router();p.post("/jobs",r,((e,t)=>{const s=e.user;if("recruiter"!=s.type)return void t.status(401).json({message:"You don't have permissions to add jobs"});const a=e.body;new d({userId:s._id,title:a.title,maxApplicants:a.maxApplicants,maxPositions:a.maxPositions,dateOfPosting:a.dateOfPosting,deadline:a.deadline,skillsets:a.skillsets,jobType:a.jobType,duration:a.duration,salary:a.salary,rating:a.rating}).save().then((()=>{t.json({message:"Job added successfully to the database"})})).catch((e=>{t.status(400).json(e)}))})),p.get("/jobs",r,((e,t)=>{let s=e.user,a={},n={};if("recruiter"===s.type&&e.query.myjobs&&(a={...a,userId:s._id}),e.query.q&&(a={...a,title:{$regex:new RegExp(e.query.q,"i")}}),e.query.jobType){let t=[];t=Array.isArray(e.query.jobType)?e.query.jobType:[e.query.jobType],console.log(t),a={...a,jobType:{$in:t}}}e.query.salaryMin&&e.query.salaryMax?a={...a,$and:[{salary:{$gte:parseInt(e.query.salaryMin)}},{salary:{$lte:parseInt(e.query.salaryMax)}}]}:e.query.salaryMin?a={...a,salary:{$gte:parseInt(e.query.salaryMin)}}:e.query.salaryMax&&(a={...a,salary:{$lte:parseInt(e.query.salaryMax)}}),e.query.duration&&(a={...a,duration:{$lt:parseInt(e.query.duration)}}),e.query.asc&&(Array.isArray(e.query.asc)?e.query.asc.map((e=>{n={...n,[e]:1}})):n={...n,[e.query.asc]:1}),e.query.desc&&(Array.isArray(e.query.desc)?e.query.desc.map((e=>{n={...n,[e]:-1}})):n={...n,[e.query.desc]:-1}),console.log(a),console.log(n);let r=[{$lookup:{from:"recruiterinfos",localField:"userId",foreignField:"userId",as:"recruiter"}},{$unwind:"$recruiter"},{$match:a}];Object.keys(n).length>0&&(r=[{$lookup:{from:"recruiterinfos",localField:"userId",foreignField:"userId",as:"recruiter"}},{$unwind:"$recruiter"},{$match:a},{$sort:n}]),console.log(r),d.aggregate(r).then((e=>{null!=e?t.json(e):t.status(404).json({message:"No job found"})})).catch((e=>{t.status(400).json(e)}))})),p.get("/jobs/:id",r,((e,t)=>{d.findOne({_id:e.params.id}).then((e=>{null!=e?t.json(e):t.status(400).json({message:"Job does not exist"})})).catch((e=>{t.status(400).json(e)}))})),p.put("/jobs/:id",r,((e,t)=>{const s=e.user;"recruiter"==s.type?d.findOne({_id:e.params.id,userId:s.id}).then((s=>{if(null==s)return void t.status(404).json({message:"Job does not exist"});const a=e.body;a.maxApplicants&&(s.maxApplicants=a.maxApplicants),a.maxPositions&&(s.maxPositions=a.maxPositions),a.deadline&&(s.deadline=a.deadline),s.save().then((()=>{t.json({message:"Job details updated successfully"})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)})):t.status(401).json({message:"You don't have permissions to change the job details"})})),p.delete("/jobs/:id",r,((e,t)=>{const s=e.user;"recruiter"==s.type?d.findOneAndDelete({_id:e.params.id,userId:s.id}).then((e=>{null!==e?t.json({message:"Job deleted successfully"}):t.status(401).json({message:"You don't have permissions to delete the job"})})).catch((e=>{t.status(400).json(e)})):t.status(401).json({message:"You don't have permissions to delete the job"})})),p.get("/user",r,((e,t)=>{const s=e.user;"recruiter"===s.type?u.findOne({userId:s._id}).then((e=>{null!=e?t.json(e):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)})):i.findOne({userId:s._id}).then((e=>{null!=e?t.json(e):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)}))})),p.get("/user/:id",r,((e,t)=>{o.findOne({_id:e.params.id}).then((e=>{null!==e?"recruiter"===e.type?u.findOne({userId:e._id}).then((e=>{null!==e?t.json(e):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)})):i.findOne({userId:e._id}).then((e=>{null!==e?t.json(e):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)})):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)}))})),p.put("/user",r,((e,t)=>{const s=e.user,a=e.body;"recruiter"==s.type?u.findOne({userId:s._id}).then((e=>{null!=e?(a.name&&(e.name=a.name),a.contactNumber&&(e.contactNumber=a.contactNumber),a.bio&&(e.bio=a.bio),e.save().then((()=>{t.json({message:"User information updated successfully"})})).catch((e=>{t.status(400).json(e)}))):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)})):i.findOne({userId:s._id}).then((e=>{null!=e?(a.name&&(e.name=a.name),a.education&&(e.education=a.education),a.skills&&(e.skills=a.skills),a.resume&&(e.resume=a.resume),a.profile&&(e.profile=a.profile),console.log(e),e.save().then((()=>{t.json({message:"User information updated successfully"})})).catch((e=>{t.status(400).json(e)}))):t.status(404).json({message:"User does not exist"})})).catch((e=>{t.status(400).json(e)}))})),p.post("/jobs/:id/applications",r,((e,t)=>{const s=e.user;if("applicant"!=s.type)return void t.status(401).json({message:"You don't have permissions to apply for a job"});const a=e.body,n=e.params.id;c.findOne({userId:s._id,jobId:n,status:{$nin:["deleted","accepted","cancelled"]}}).then((e=>{console.log(e),null===e?d.findOne({_id:n}).then((e=>{null!==e?c.countDocuments({jobId:n,status:{$nin:["rejected","deleted","cancelled","finished"]}}).then((n=>{n<e.maxApplicants?c.countDocuments({userId:s._id,status:{$nin:["rejected","deleted","cancelled","finished"]}}).then((n=>{n<10?c.countDocuments({userId:s._id,status:"accepted"}).then((n=>{0===n?new c({userId:s._id,recruiterId:e.userId,jobId:e._id,status:"applied",sop:a.sop}).save().then((()=>{t.json({message:"Job application successful"})})).catch((e=>{t.status(400).json(e)})):t.status(400).json({message:"You already have an accepted job. Hence you cannot apply."})})):t.status(400).json({message:"You have 10 active applications. Hence you cannot apply."})})).catch((e=>{t.status(400).json(e)})):t.status(400).json({message:"Application limit reached"})})).catch((e=>{t.status(400).json(e)})):t.status(404).json({message:"Job does not exist"})})).catch((e=>{t.status(400).json(e)})):t.status(400).json({message:"You have already applied for this job"})})).catch((e=>{t.json(400).json(e)}))})),p.get("/jobs/:id/applications",r,((e,t)=>{const s=e.user;if("recruiter"!=s.type)return void t.status(401).json({message:"You don't have permissions to view job applications"});let a={jobId:e.params.id,recruiterId:s._id};e.query.status&&(a={...a,status:e.query.status}),c.find(a).collation({locale:"en"}).sort({}).then((e=>{t.json(e)})).catch((e=>{t.status(400).json(e)}))})),p.get("/applications",r,((e,t)=>{const s=e.user;c.aggregate([{$lookup:{from:"jobapplicantinfos",localField:"userId",foreignField:"userId",as:"jobApplicant"}},{$unwind:"$jobApplicant"},{$lookup:{from:"jobs",localField:"jobId",foreignField:"_id",as:"job"}},{$unwind:"$job"},{$lookup:{from:"recruiterinfos",localField:"recruiterId",foreignField:"userId",as:"recruiter"}},{$unwind:"$recruiter"},{$match:{["recruiter"===s.type?"recruiterId":"userId"]:s._id}},{$sort:{dateOfApplication:-1}}]).then((e=>{t.json(e)})).catch((e=>{t.status(400).json(e)}))})),p.put("/applications/:id",r,((e,t)=>{const s=e.user,a=e.params.id,n=e.body.status;"recruiter"===s.type?"accepted"===n?c.findOne({_id:a,recruiterId:s._id}).then((a=>{null!==a?d.findOne({_id:a.jobId,userId:s._id}).then((r=>{null!==r?c.countDocuments({recruiterId:s._id,jobId:r._id,status:"accepted"}).then((o=>{o<r.maxPositions?(a.status=n,a.dateOfJoining=e.body.dateOfJoining,a.save().then((()=>{c.updateMany({_id:{$ne:a._id},userId:a.userId,status:{$nin:["rejected","deleted","cancelled","accepted","finished"]}},{$set:{status:"cancelled"}},{multi:!0}).then((()=>{"accepted"===n?d.findOneAndUpdate({_id:r._id,userId:s._id},{$set:{acceptedCandidates:o+1}}).then((()=>{t.json({message:`Application ${n} successfully`})})).catch((e=>{t.status(400).json(e)})):t.json({message:`Application ${n} successfully`})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)}))):t.status(400).json({message:"All positions for this job are already filled"})})):t.status(404).json({message:"Job does not exist"})})):t.status(404).json({message:"Application not found"})})).catch((e=>{t.status(400).json(e)})):c.findOneAndUpdate({_id:a,recruiterId:s._id,status:{$nin:["rejected","deleted","cancelled"]}},{$set:{status:n}}).then((e=>{null!==e?"finished"===n?t.json({message:`Job ${n} successfully`}):t.json({message:`Application ${n} successfully`}):t.status(400).json({message:"Application status cannot be updated"})})).catch((e=>{t.status(400).json(e)})):"cancelled"===n?(console.log(a),console.log(s._id),c.findOneAndUpdate({_id:a,userId:s._id},{$set:{status:n}}).then((e=>{console.log(e),t.json({message:`Application ${n} successfully`})})).catch((e=>{t.status(400).json(e)}))):t.status(401).json({message:"You don't have permissions to update job status"})})),p.get("/applicants",r,((e,t)=>{const s=e.user;if("recruiter"===s.type){let a={recruiterId:s._id};e.query.jobId&&(a={...a,jobId:new n.Types.ObjectId(e.query.jobId)}),e.query.status&&(a=Array.isArray(e.query.status)?{...a,status:{$in:e.query.status}}:{...a,status:e.query.status});let r={};e.query.asc||e.query.desc||(r={_id:1}),e.query.asc&&(Array.isArray(e.query.asc)?e.query.asc.map((e=>{r={...r,[e]:1}})):r={...r,[e.query.asc]:1}),e.query.desc&&(Array.isArray(e.query.desc)?e.query.desc.map((e=>{r={...r,[e]:-1}})):r={...r,[e.query.desc]:-1}),c.aggregate([{$lookup:{from:"jobapplicantinfos",localField:"userId",foreignField:"userId",as:"jobApplicant"}},{$unwind:"$jobApplicant"},{$lookup:{from:"jobs",localField:"jobId",foreignField:"_id",as:"job"}},{$unwind:"$job"},{$match:a},{$sort:r}]).then((e=>{0!==e.length?t.json(e):t.status(404).json({message:"No applicants found"})})).catch((e=>{t.status(400).json(e)}))}else t.status(400).json({message:"You are not allowed to access applicants list"})})),p.put("/rating",r,((e,t)=>{const s=e.user,a=e.body;"recruiter"===s.type?l.findOne({senderId:s._id,receiverId:a.applicantId,category:"applicant"}).then((e=>{null===e?(console.log("new rating"),c.countDocuments({userId:a.applicantId,recruiterId:s._id,status:{$in:["accepted","finished"]}}).then((r=>{r>0?(e=new l({category:"applicant",receiverId:a.applicantId,senderId:s._id,rating:a.rating})).save().then((()=>{l.aggregate([{$match:{receiverId:n.Types.ObjectId(a.applicantId),category:"applicant"}},{$group:{_id:{},average:{$avg:"$rating"}}}]).then((e=>{if(null===e)return void t.status(400).json({message:"Error while calculating rating"});const s=e[0].average;i.findOneAndUpdate({userId:a.applicantId},{$set:{rating:s}}).then((e=>{null!==e?t.json({message:"Rating added successfully"}):t.status(400).json({message:"Error while updating applicant's average rating"})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)})):t.status(400).json({message:"Applicant didn't worked under you. Hence you cannot give a rating."})})).catch((e=>{t.status(400).json(e)}))):(e.rating=a.rating,e.save().then((()=>{l.aggregate([{$match:{receiverId:n.Types.ObjectId(a.applicantId),category:"applicant"}},{$group:{_id:{},average:{$avg:"$rating"}}}]).then((e=>{if(null===e)return void t.status(400).json({message:"Error while calculating rating"});const s=e[0].average;i.findOneAndUpdate({userId:a.applicantId},{$set:{rating:s}}).then((e=>{null!==e?t.json({message:"Rating updated successfully"}):t.status(400).json({message:"Error while updating applicant's average rating"})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)})))})).catch((e=>{t.status(400).json(e)})):l.findOne({senderId:s._id,receiverId:a.jobId,category:"job"}).then((e=>{console.log(s._id),console.log(a.jobId),console.log(e),null===e?(console.log(e),c.countDocuments({userId:s._id,jobId:a.jobId,status:{$in:["accepted","finished"]}}).then((r=>{r>0?(e=new l({category:"job",receiverId:a.jobId,senderId:s._id,rating:a.rating})).save().then((()=>{l.aggregate([{$match:{receiverId:n.Types.ObjectId(a.jobId),category:"job"}},{$group:{_id:{},average:{$avg:"$rating"}}}]).then((e=>{if(null===e)return void t.status(400).json({message:"Error while calculating rating"});const s=e[0].average;d.findOneAndUpdate({_id:a.jobId},{$set:{rating:s}}).then((e=>{null!==e?t.json({message:"Rating added successfully"}):t.status(400).json({message:"Error while updating job's average rating"})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)})):t.status(400).json({message:"You haven't worked for this job. Hence you cannot give a rating."})})).catch((e=>{t.status(400).json(e)}))):(e.rating=a.rating,e.save().then((()=>{l.aggregate([{$match:{receiverId:n.Types.ObjectId(a.jobId),category:"job"}},{$group:{_id:{},average:{$avg:"$rating"}}}]).then((e=>{if(null===e)return void t.status(400).json({message:"Error while calculating rating"});const s=e[0].average;console.log(s),d.findOneAndUpdate({_id:a.jobId},{$set:{rating:s}}).then((e=>{null!==e?t.json({message:"Rating added successfully"}):t.status(400).json({message:"Error while updating job's average rating"})})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)}))})).catch((e=>{t.status(400).json(e)})))})).catch((e=>{t.status(400).json(e)}))})),p.get("/rating",r,((e,t)=>{const s=e.user;l.findOne({senderId:s._id,receiverId:e.query.id,category:"recruiter"===s.type?"applicant":"job"}).then((e=>{null!==e?t.json({rating:e.rating}):t.json({rating:-1})}))})),e.exports=p},714:e=>{"use strict";e.exports=require("passport-jwt")},752:e=>{"use strict";e.exports=require("passport-local")},793:(e,t,s)=>{const a=s(37),n=s(486);s(129);let r=new a.Schema({email:{type:a.SchemaTypes.Email,unique:!0,lowercase:!0,required:!0},password:{type:String,required:!0},type:{type:String,enum:["recruiter","applicant"],required:!0}},{collation:{locale:"en"}});r.pre("save",(function(e){let t=this;if(!t.isModified("password"))return e();n.hash(t.password,10,((s,a)=>{if(s)return e(s);t.password=a,e()}))})),r.methods.login=function(e){let t=this;return new Promise(((s,a)=>{n.compare(e,t.password,((e,t)=>{e&&a(e),t?s():a()}))}))},e.exports=a.model("UserAuth",r)},829:e=>{"use strict";e.exports=require("jsonwebtoken")},833:(e,t,s)=>{const a=s(278),n=s(752).Strategy,r=s(714),o=r.Strategy,i=r.ExtractJwt,u=s(793),d=s(359),c=(e,t)=>{const s={};return Object.keys(e).forEach((a=>{-1===t.indexOf(a)&&(s[a]=e[a])})),s};a.use(new n({usernameField:"email",passReqToCallback:!0},((e,t,s,a,n)=>{u.findOne({email:t},((e,t)=>e?a(e):t?void t.login(s).then((()=>(t._doc=c(t._doc,["password","__v"]),a(null,t)))).catch((e=>a(e,!1,{message:"Password is incorrect."}))):a(null,!1,{message:"User does not exist"})))}))),a.use(new o({jwtFromRequest:i.fromAuthHeaderAsBearerToken(),secretOrKey:d.jwtSecretKey},((e,t)=>{u.findById(e._id).then((s=>(console.log(Object.keys(e)),s?(s._doc=c(s._doc,["password","__v"]),t(null,s)):t(null,!1,{message:"JWT Token does not exist"})))).catch((e=>t(e,!1,{message:"Incorrect Token"})))}))),e.exports=a},896:e=>{"use strict";e.exports=require("fs")},903:e=>{"use strict";e.exports=require("uuid")},928:e=>{"use strict";e.exports=require("path")},995:(e,t,s)=>{const a=s(37);let n=new a.Schema({category:{type:String,enum:["job","applicant"],required:!0},receiverId:{type:a.Schema.Types.ObjectId,required:!0},senderId:{type:a.Schema.Types.ObjectId,required:!0},rating:{type:Number,max:5,default:-1,validate:{validator:function(e){return e>=-1&&e<=5},msg:"Invalid rating"}}},{collation:{locale:"en"}});n.index({category:1,receiverId:1,senderId:1},{unique:!0}),e.exports=a.model("ratings",n)}},t={};function s(a){var n=t[a];if(void 0!==n)return n.exports;var r=t[a]={exports:{}};return e[a](r,r.exports,s),r.exports}const a=s(252),n=s(268),r=s(37),o=s(833),i=s(577),u=s(896);r.connect("mongodb://127.0.0.1:27017/jobPortal",{useNewUrlParser:!0,useUnifiedTopology:!0,useCreateIndex:!0,useFindAndModify:!1}).then((e=>console.log("Connected to DB"))).catch((e=>console.log(e))),u.existsSync("./public")||u.mkdirSync("./public"),u.existsSync("./public/resume")||u.mkdirSync("./public/resume"),u.existsSync("./public/profile")||u.mkdirSync("./public/profile");const d=a();d.use(n.json()),d.use(n.urlencoded({extended:!0})),d.use(i()),d.use(a.json()),d.use(o.initialize()),d.use("/auth",s(258)),d.use("/api",s(650)),d.use("/upload",s(485)),d.use("/host",s(164)),d.listen(4444,(()=>{console.log("Server started on port 4444!")}))})();